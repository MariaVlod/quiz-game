import React, { useEffect, useRef } from 'react'
import Header from '../components/Header'
import Card from '../components/Card'
import Button from '../components/Button'
import Question from '../game/Question'
import AnswerList from '../game/AnswerList'
import ProgressInfo from '../game/ProgressInfo'
import ScoreBoard from '../game/ScoreBoard'
import { useGameFlow } from '../hooks/useGameFlow'
import { useTimer } from '../hooks/useTimer'
import type { Question as QuestionType } from '../types'

interface GamePageProps {
  questions: QuestionType[]
  onEndGame: (score: number, answersHistory: any[]) => void
}

const GamePage: React.FC<GamePageProps> = ({ questions, onEndGame }) => {
  const {
    currentQuestion,
    selectedOptionId,
    answersHistory,
    score,
    isFinished,
    isAnswerLocked,
    selectOption,
    skipQuestion, // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –º–µ—Ç–æ–¥
    next,
    getProgress
  } = useGameFlow(questions)

  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ useRef –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤
  const timeoutRef = useRef<number | null>(null);

  const handleTimeExpire = React.useCallback(() => {
    console.log('‚è∞ –ß–∞—Å –≤–∏–π—à–æ–≤! –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–µ—Ä–µ—Ö—ñ–¥...');
    
    // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–∞—É—Ç, —è–∫—â–æ –≤—ñ–Ω —î
    if (timeoutRef.current !== null) {
      clearTimeout(timeoutRef.current);
    }

    if (!isAnswerLocked && currentQuestion) {
      console.log('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤—Å—Ç–∏–≥ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è:', currentQuestion.id);
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É –ø–∏—Ç–∞–Ω–Ω—è
      skipQuestion();
    }
    
    // –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–±–∞—á–∏–≤, —â–æ —á–∞—Å –≤–∏–π—à–æ–≤
    timeoutRef.current = window.setTimeout(() => {
      console.log('–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è...');
      next();
      timeoutRef.current = null;
    }, 1000);
  }, [isAnswerLocked, currentQuestion, skipQuestion, next]);

  const { timeLeft, reset, pause } = useTimer({
    initialSeconds: 10,
    onExpire: handleTimeExpire,
    autoStart: true
  })

  const handleAnswerSelect = (optionId: string) => {
    console.log('–í–∏–±—ñ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', optionId);
    selectOption(optionId)
    pause(); // –ó—É–ø–∏–Ω—è—î–º–æ —Ç–∞–π–º–µ—Ä –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    
    // –û—á–∏—â–∞—î–º–æ —Ç–∞–π–º–∞—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥—É, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—Å—Ç–∏–≥ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏
    if (timeoutRef.current !== null) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = null;
    }
  }

  const handleNext = () => {
    console.log('–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è');
    next()
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏
  useEffect(() => {
    if (isFinished) {
      console.log('üéÆ –ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç:', score, '–Ü—Å—Ç–æ—Ä—ñ—è:', answersHistory);
      onEndGame(score, answersHistory)
    }
  }, [isFinished, score, answersHistory, onEndGame])

  // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è
  useEffect(() => {
    if (currentQuestion) {
      console.log('üîÑ –ù–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞:', currentQuestion.id);
      
      // –û—á–∏—â–∞—î–º–æ —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è
      if (timeoutRef.current !== null) {
        clearTimeout(timeoutRef.current);
        timeoutRef.current = null;
      }
      
      reset(10);
    }
  }, [currentQuestion, reset])

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–æ–∑–º–æ–Ω—Ç—É–≤–∞–Ω–Ω—ñ
  useEffect(() => {
    return () => {
      if (timeoutRef.current !== null) {
        clearTimeout(timeoutRef.current);
      }
    };
  }, []);

  if (!currentQuestion) {
    return (
      <div className="page game-page">
        <Header />
        <Card>
          <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è...</p>
        </Card>
      </div>
    )
  }

  const progress = getProgress()

  return (
    <div className="page game-page">
      <Header />
      
      <div className="game-page__layout">
        <div className="game-page__info">
          <ProgressInfo 
            current={progress.current} 
            total={progress.total} 
          />
          <ScoreBoard score={score} />
          <div className={`timer ${timeLeft <= 3 ? 'timer--warning' : ''}`}>
            –ß–∞—Å: {timeLeft}—Å {!isAnswerLocked && timeLeft > 0 && '‚è≥'}
          </div>
        </div>
        
        <Card className="game-page__question-card">
          <Question text={currentQuestion.text} />
          
          <AnswerList 
            answers={currentQuestion.options}
            selectedOptionId={selectedOptionId}
            correctOptionId={isAnswerLocked ? currentQuestion.correctOptionId : undefined}
            onAnswerSelect={handleAnswerSelect}
            disabled={isAnswerLocked}
          />

          {/* –î–µ–±–∞–≥ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è */}
          <div style={{ 
            marginTop: '20px', 
            padding: '10px', 
            background: '#f5f5f5', 
            borderRadius: '5px',
            fontSize: '12px',
            color: '#666'
          }}>
            –î–µ–±–∞–≥: –ü–∏—Ç–∞–Ω–Ω—è {currentQuestion.id} ({progress.current}/{progress.total}) | 
            –í—ñ–¥–ø–æ–≤—ñ–¥–µ–π –≤ —ñ—Å—Ç–æ—Ä—ñ—ó: {answersHistory.length} | 
            isAnswerLocked = {isAnswerLocked.toString()} | 
            –ß–∞—Å: {timeLeft}—Å
          </div>
        </Card>
        
        <div className="game-page__actions">
          {isAnswerLocked && (
            <Button onClick={handleNext}>
              {progress.current === progress.total ? '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≥—Ä—É' : '–ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è ‚Üí'}
            </Button>
          )}
        </div>
      </div>
    </div>
  )
}

export default GamePage