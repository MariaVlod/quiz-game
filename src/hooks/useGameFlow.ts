import { useState, useCallback, useEffect } from 'react';
import type { Question, AnswerHistory, GameConfig } from '../types';
import { calculateScore } from '../utils/scoring';

interface UseGameFlowReturn {
  // –°—Ç–∞–Ω
  currentIndex: number;
  currentQuestion: Question | null;
  selectedOptionId: string | null;
  answersHistory: AnswerHistory[];
  score: number;
  isFinished: boolean;
  isAnswerLocked: boolean;

  // –ú–µ—Ç–æ–¥–∏
  selectOption: (optionId: string) => void;
  skipQuestion: () => void;
  next: () => void;
  restart: () => void;
  getProgress: () => { current: number; total: number };
}

export const useGameFlow = (
  questions: Question[],
  config: GameConfig = {}
): UseGameFlowReturn => {
  const [currentIndex, setCurrentIndex] = useState<number>(0);
  const [selectedOptionId, setSelectedOptionId] = useState<string | null>(null);
  const [answersHistory, setAnswersHistory] = useState<AnswerHistory[]>([]);
  const [isAnswerLocked, setIsAnswerLocked] = useState<boolean>(false);
  const [isFinished, setIsFinished] = useState<boolean>(false);

  const currentQuestion = questions[currentIndex] || null;
  const totalQuestions = questions.length;

  // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –±–∞–ª—ñ–≤
  const score = calculateScore(answersHistory);

  const selectOption = useCallback((optionId: string) => {
    if (isAnswerLocked || !currentQuestion) return;

    const isCorrect = optionId === currentQuestion.correctOptionId;

    console.log('üéØ –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–±—Ä–∞–Ω–∞:', {
      optionId,
      isCorrect,
      correctAnswer: currentQuestion.correctOptionId
    });

    setSelectedOptionId(optionId);
    setIsAnswerLocked(true); // –ë–ª–æ–∫—É—î–º–æ –ø–æ–¥–∞–ª—å—à—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    const newAnswer: AnswerHistory = {
      questionId: currentQuestion.id,
      selectedOptionId: optionId,
      isCorrect,
      timeTaken: 0
    };

    setAnswersHistory(prev => [...prev, newAnswer]);

    // –¢–∞–π–º–µ—Ä –º–∞—î –∑—É–ø–∏–Ω–∏—Ç–∏—Å—è —Ç—É—Ç –¥–ª—è –ö–û–ñ–ù–û–á –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (–ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó —á–∏ –Ω—ñ)
    // –¶–µ –∑–∞–±–µ–∑–ø–µ—á–∏—Ç—å –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –ø–æ–≤–µ–¥—ñ–Ω–∫–∏

  }, [currentQuestion, isAnswerLocked]);

 
  const skipQuestion = useCallback(() => {
    if (isAnswerLocked || !currentQuestion) return;

    console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –ø–∏—Ç–∞–Ω–Ω—è:', currentQuestion.id);

    // –î–æ–¥–∞—î–º–æ –ø—Ä–æ–ø—É—â–µ–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤ —ñ—Å—Ç–æ—Ä—ñ—é
    const skippedAnswer: AnswerHistory = {
      questionId: currentQuestion.id,
      selectedOptionId: null, // null –æ–∑–Ω–∞—á–∞—î, —â–æ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–æ
      isCorrect: false,
      timeTaken: 0
    };

    setAnswersHistory(prev => [...prev, skippedAnswer]);
    setIsAnswerLocked(true);
  }, [currentQuestion, isAnswerLocked]);

  const next = useCallback(() => {
    console.log('‚û°Ô∏è –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è. –ü–æ—Ç–æ—á–Ω–∏–π —ñ–Ω–¥–µ–∫—Å:', currentIndex, '–í—Å—å–æ–≥–æ:', totalQuestions);
    
    if (currentIndex >= totalQuestions - 1) {
      console.log('üéÆ –û—Å—Ç–∞–Ω–Ω—î –ø–∏—Ç–∞–Ω–Ω—è, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏');
      setIsFinished(true);
    } else {
      setCurrentIndex(prev => prev + 1);
      setSelectedOptionId(null);
      setIsAnswerLocked(false);
      console.log('üîÑ –ù–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å –ø–∏—Ç–∞–Ω–Ω—è:', currentIndex + 1);
    }
  }, [currentIndex, totalQuestions]);

  const restart = useCallback(() => {
    setCurrentIndex(0);
    setSelectedOptionId(null);
    setAnswersHistory([]);
    setIsAnswerLocked(false);
    setIsFinished(false);
  }, []);

  const getProgress = useCallback(() => ({
    current: currentIndex + 1,
    total: totalQuestions
  }), [currentIndex, totalQuestions]);

  // –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏, –∫–æ–ª–∏ –≤—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–Ω—ñ –∞–±–æ –ø—Ä–æ–ø—É—â–µ–Ω—ñ
  useEffect(() => {
    if (answersHistory.length === totalQuestions && totalQuestions > 0) {
      setIsFinished(true);
    }
  }, [answersHistory.length, totalQuestions]);

  return {
    // –°—Ç–∞–Ω
    currentIndex,
    currentQuestion,
    selectedOptionId,
    answersHistory,
    score,
    isFinished,
    isAnswerLocked,

    // –ú–µ—Ç–æ–¥–∏
    selectOption,
    skipQuestion,
    next,
    restart,
    getProgress
  };
};