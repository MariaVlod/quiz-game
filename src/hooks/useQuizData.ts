import { useState, useEffect, useCallback } from 'react';
import type { Question, QuizFilterOptions } from '../types';
import { mockQuestions } from '../data/mockQuestions';
import { shuffleArray, shuffleQuestions } from '../utils/shuffle';
import { useGameStore } from '../store/gameStore'; //Zustand

export const useQuizData = () => {
  const { settings } = useGameStore(); //Zustand
  const [questions, setQuestions] = useState<Question[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<Error | null>(null);

  const loadQuestions = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);

      // –°–∏–º—É–ª—è—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ API
      await new Promise(resolve => setTimeout(resolve, 500));

      let availableQuestions = [...mockQuestions];

      // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—é –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
      if (settings.difficulty && settings.difficulty !== 'all') {
        availableQuestions = availableQuestions.filter(
          q => q.difficulty === settings.difficulty
        );
        console.log('üîç –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—é:', settings.difficulty, '–¥–æ—Å—Ç—É–ø–Ω–æ:', availableQuestions.length, '–ø–∏—Ç–∞–Ω—å');
      }

      if (availableQuestions.length === 0) {
        throw new Error('–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–∏—Ç–∞–Ω—å –∑–∞ –æ–±—Ä–∞–Ω–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏');
      }

      let selectedQuestions: Question[];  
      const count = settings.count || 5;  

      if (availableQuestions.length <= count) {  
        selectedQuestions = [...availableQuestions];  
      } else {  
        const shuffled = shuffleArray(availableQuestions);  
        selectedQuestions = shuffled.slice(0, count);  
      }

      const finalQuestions = shuffleQuestions(selectedQuestions);

      // –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥–µ–±–∞–≥—É  
      console.log('‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è:', {  
        –æ–±—Ä–∞–Ω–∞–°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å: settings.difficulty,  
        –∫—ñ–ª—å–∫—ñ—Å—Ç—å–ü–∏—Ç–∞–Ω—å: settings.count,  
        –¥–æ—Å—Ç—É–ø–Ω–æ–ü–∏—Ç–∞–Ω—å: availableQuestions.length,  
        –æ–±—Ä–∞–Ω–æ–ü–∏—Ç–∞–Ω—å: finalQuestions.length,  
        —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ: finalQuestions.map(q => q.difficulty),  
        –ø–∏—Ç–∞–Ω–Ω—èIDs: finalQuestions.map(q => q.id)  
      });  

      setQuestions(finalQuestions);  
    } catch (err) {  
      const error = err instanceof Error ? err : new Error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω—å');  
      setError(error);  
      console.error('‚úó –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω—å:', error);  
    } finally {  
      setLoading(false);  
    }  
  }, [settings]);

  const reload = useCallback(() => {  
    loadQuestions();  
  }, [loadQuestions]);

  useEffect(() => {  
    loadQuestions();  
  }, [loadQuestions]);

  return {
    questions,
    loading,
    error,
    reload
  };
};